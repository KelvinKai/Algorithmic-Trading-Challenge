View(train_mat)
dim(train_mat)
View(train_mat)
View(train_mat)
load("~/Desktop/sample_train.Rdata")
colnames(sample_train)
?grpl
??grepl
?grepl
?gather
??gather
times <- seq(as.Date("2017-05-01"),length=100,by="days")
times <- seq(as.Date("2017-05-01"),length=100,by="days")
library("xts")
?xts
train_xts <- xts(train_mat,order.by = times)
?dygraph
library("dygraphs")
dygraph(train_xts[,1:4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries("..1", label = "AR(1)") %>%
dySeries("..2", label = "IID") %>%
dySeries("..3", label = "AR(1)-GARCH(1,1)") %>%
dySeries("..4", label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
View(train_xts)
?dygraph
?dySeries
dygraph(train_xts[,1:4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
dygraph(train_xts[,1:100],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
dygraph(train_xts[1,4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
dygraph(train_xts[1,4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
dygraph(train_xts[,1:4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
??adf.test
library("tseries")
adf.test(train_xts[,1], "stationary")
??auto.arima
library("forecast")
auto.arima(train_xts[,1], seasonal = F)
auto.arima(train_xts[,2], seasonal = F)
??tsdisplay
fit <- auto.arima(train_xts[,1], seasonal = F)
tsdisplay(residuals(fit), lag.max=45, main='(2,2,2) Model Residuals')
?auto.arima
fit <- auto.arima(train_xts[,1], seasonal = F, max.p = 10, max.q = 10)
tsdisplay(residuals(fit), lag.max=45, main='(2,2,2) Model Residuals')
fit
?forecast
forecast(fit,h = 50)
fcast <- forecast(fit,h = 50)
plot(fcast)
hold <- window(ts(train_xts[,1]), start=50)
hold
hold <- window(ts(train_xts[,1]), start=51)
fit_no_holdout = auto.arima(train_xts[1:50,1])
fit_first_half = auto.arima(train_xts[1:50,1])
fcast_second_half <- forecast(fit_first_half,h=50)
plot(fcast_second_half, main=" ")
lines(train_xts[,1])
lines(ts(train_xts[,1]))
hist(train_xts[,1])
head(train_xts[,1])
hist(train_xts[,1])
library(MASS)
Box = boxcox(train_xts[,1] ~ 1,              # Transform Turbidity as a single vector
lambda = seq(-6,6,0.1))      # Try values -6 to 6 by 0.1
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (train_xts[,1] ^ lambda - 1)/lambda   # Transform the original data
library(rcompanion)
install.packages("rcompanian")
install.packages(rcompanian)
install.packages("rcompanion")
library(rcompanion)
plotNormalHistogram(T_box)
View(T_box)
sum(is.na(train_xts))
sum(is.nan(train_xts))
sum(is.inf(train_xts))
sum(is.infinite(train_xts))
sum(train_xts==0)
sum(train_xts<=0)
library("car")
c <- coef(powerTransform(train_xts[,1]))
hist(log(train_xts[,1]))
?boxcox
boxcox(train_xts[,1])
boxcox(as.data.frame(train_xts[,1]))
times <- seq(as.Date("2017-05-01"),length=100,by="days")
train_xts <- xts(train_mat,order.by = times)
sum(is.na(train_xts))
sum(is.nan(train_xts))
sum(is.infinite(train_xts))
sum(train_xts<=0)
dygraph(train_xts[,1:4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dySeries(, label = "AR(1)") %>%
dySeries(, label = "IID") %>%
dySeries(, label = "AR(1)-GARCH(1,1)") %>%
dySeries(, label = "AR(1)-OHLC") %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
dygraph(train_xts[,1:4],main = 'Sharpe Ratio Maximised Portfolio') %>%
dyRangeSelector()  %>%
dyOptions(axisLineWidth = 1.5, fillGraph = FALSE, drawGrid = T, rightGap=50)
adf.test(train_xts[,1], "stationary")
fit <- auto.arima(train_xts[,1], seasonal = F, max.p = 10, max.q = 10)
tsdisplay(residuals(fit), lag.max=45, main='(2,2,2) Model Residuals')
hold <- window(ts(train_xts[,1]), start=51)
fit_first_half = auto.arima(train_xts[1:50,1])
fcast_second_half <- forecast(fit_first_half,h=50)
plot(fcast_second_half, main=" ")
lines(ts(train_xts[,1]))
?apply
apply(train_xts[1:50,1:10],2,function(x){
auto.arima(x,seasonal = F, max.p = 10, max.q = 10)
})
x = train_xts
x = train_xts[,1]
fit <- auto.arima(x,seasonal = F, max.p = 10, max.q = 10)
fcast <- forecast(fit, h - 50)
fcast <- forecast(fit, h = 50)
?forecast
fcast <- fcast$mean
arima <- function(x){
fit <- auto.arima(x,seasonal = F, max.p = 10, max.q = 10)
fcast <- forecast(fit, h = 50)
fcast <- fcast$mean
}
apply(train_xts[1:50,1:10],2,arima)
View(train_xts)
arima <- function(x){
fit <- auto.arima(x,seasonal = F, max.p = 10, max.q = 10)
fcast <- forecast(fit, h = 50)
fcast <- fcast$mean
}
pred <- apply(train_xts[1:50,],2,arima)
pred <- apply(train_xts[1:50,1:10],2,arima)
View(pred)
temp <- train_xts[,1:10]
View(temp)
getwd()
save(train_xts, file = "train_xts.Rdata")
